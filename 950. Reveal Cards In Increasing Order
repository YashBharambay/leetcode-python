class Solution:
    def deckRevealedIncreasing(self, deck: List[int]) -> List[int]:
        # deck.sort()
        # if len(deck) <= 2:
        #     return deck
        # N = len(deck)
        # res = [0] * len(deck)
        # indexes = [0] * len(deck)
        # i = 0
        # j= 0
        # while i < len(deck):
        #     indexes[i] = i
        #     i += 1
        
        # for i in range(len(deck)):
        #     res[indexes[0]] = deck[i]
        #     indexes.pop(0)
        #     if len(indexes) > 0:
        #         indexes.append(indexes.pop(0))
        #     else:
        #         break
        # return res

        #   # Sort the deck in increasing order
        deck.sort()
        
        n = len(deck)
        result = [0] * n
        indices = deque(range(n))
        
        for card in deck:
            idx = indices.popleft()  # Get the next available index
            result[idx] = card       # Place the card in the result array
            if indices:               # If there are remaining indices in the deque
                indices.append(indices.popleft())  # Move the used index to the end of deque
        
        return result
        
